{"version":3,"sources":["main.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","Calcutip","this","totalTip","document","querySelector","totalOverall","totalTax","totalTipTaxInc","totalOverallTaxInc","totalMoreBtn","totalMoreArea","inputMoreBtn","inputMoreArea","inputBillPrice","inputTipPct","inputNumPeople","inputSalesTax","onLoad","updateValues","bind","toggleTotalHide","toggleInputHide","addEventListeners","value","addEventListener","classList","toggle","evt","log","inputBillPriceVal","checkIsNaN","parseFloat","inputTipPctVal","inputNumPeopleVal","inputSalesTaxVal","innerHTML","calculateTotalTip","calculateTotalOverall","calculateTotalTax","calculateTotalTipTaxInc","calculateTotalOverallTaxInc","num","isNaN","tax","totalNoTax","finalTotalTip","toFixed","finalTotal"],"mappings":"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","file":"main.js","sourcesContent":["/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  class Calcutip {\n    constructor(){\n      /**\n       * Selectors for the total area\n       */\n      this.totalTip = document.querySelector(\".total-tip\");\n      this.totalOverall = document.querySelector(\".total-overall\");\n      this.totalTax = document.querySelector(\".total-tax\");\n      this.totalTipTaxInc = document.querySelector(\".total-tip-tax-inc\");\n      this.totalOverallTaxInc = document.querySelector(\".total-overall-tax-inc\");\n\n      this.totalMoreBtn = document.querySelector(\".total__more-btn\");\n      this.totalMoreArea = document.querySelector(\".total__more-area\");\n\n      this.inputMoreBtn = document.querySelector(\".input-area__more-btn\");\n      this.inputMoreArea = document.querySelector(\".input-area__more-area\");\n\n      /**\n       * Selectors for the input form\n       */\n      this.inputBillPrice = document.querySelector(\".input-bill-price input\");\n      this.inputTipPct = document.querySelector(\".input-tip-pct input\");\n      this.inputNumPeople = document.querySelector(\".input-num-people input\");\n      this.inputSalesTax = document.querySelector(\".input-sales-tax input\");\n\n      this.onLoad = this.onLoad();\n      this.updateValues = this.updateValues.bind(this);\n      this.toggleTotalHide = this.toggleTotalHide.bind(this);\n      this.toggleInputHide = this.toggleInputHide.bind(this);\n\n      this.addEventListeners();\n    }\n\n    addEventListeners() { \n      document.addEventListener(\"onload\", this.onLoad);\n\n      this.totalMoreBtn.addEventListener(\"click\", this.toggleTotalHide);\n      this.inputMoreBtn.addEventListener(\"click\", this.toggleInputHide);\n\n      this.inputBillPrice.addEventListener(\"input\", this.updateValues);\n      this.inputTipPct.addEventListener(\"input\", this.updateValues);\n      this.inputNumPeople.addEventListener(\"input\", this.updateValues);\n      this.inputSalesTax.addEventListener(\"input\", this.updateValues);\n    }\n\n    onLoad() { \n      this.totalMoreArea.classList.toggle(\"hidden\");\n      this.inputMoreArea.classList.toggle(\"hidden\");\n      this.updateValues();\n    }\n\n    toggleTotalHide(evt) {\n      this.totalMoreArea.classList.toggle(\"hidden\");\n      console.log(\"Clicking on toggle hide\");\n    }\n\n    toggleInputHide(evt) {\n      this.inputMoreArea.classList.toggle(\"hidden\");\n      console.log(\"input Clicking on toggle hide\");\n    }\n\n    updateValues(evt) {\n      let inputBillPriceVal = this.checkIsNaN(parseFloat(this.inputBillPrice.value));\n      let inputTipPctVal = this.checkIsNaN(parseFloat(this.inputTipPct.value));\n      let inputNumPeopleVal = this.checkIsNaN(parseFloat(this.inputNumPeople.value));\n      let inputSalesTaxVal = this.checkIsNaN(parseFloat(this.inputSalesTax.value));\n\n      //Determine if num of people is 0 to avoid dividing by 0\n      inputNumPeopleVal = inputNumPeopleVal > 0 ? inputNumPeopleVal : 1;\n\n      this.totalTip.innerHTML = this.calculateTotalTip(\n        inputBillPriceVal,\n        inputTipPctVal,\n        inputNumPeopleVal,\n        inputSalesTaxVal\n      );\n\n      this.totalOverall.innerHTML = this.calculateTotalOverall(\n        inputBillPriceVal,\n        inputTipPctVal,\n        inputNumPeopleVal,\n        inputSalesTaxVal\n      );\n\n      this.totalTax.innerHTML = this.calculateTotalTax(\n        inputBillPriceVal,\n        inputTipPctVal,\n        inputNumPeopleVal,\n        inputSalesTaxVal\n      );\n\n      this.totalTipTaxInc.innerHTML = this.calculateTotalTipTaxInc(\n        inputBillPriceVal,\n        inputTipPctVal,\n        inputNumPeopleVal,\n        inputSalesTaxVal\n      );\n\n      this.totalOverallTaxInc.innerHTML = this.calculateTotalOverallTaxInc(\n        inputBillPriceVal,\n        inputTipPctVal,\n        inputNumPeopleVal,\n        inputSalesTaxVal\n      );\n    }\n\n    checkIsNaN(num){\n      return isNaN(num) ? 0 : num;\n    }\n\n    calculateTotalTip(inputBillPriceVal, inputTipPctVal, inputNumPeopleVal, inputSalesTaxVal) {\n      let tax = (inputBillPriceVal) - (inputBillPriceVal / ((inputSalesTaxVal * 0.01) + 1));\n      let totalNoTax = inputBillPriceVal - tax;\n      let finalTotalTip = (totalNoTax * (inputTipPctVal * 0.01)) / inputNumPeopleVal;\n      \n      return parseFloat(finalTotalTip).toFixed(2);\n    }\n    calculateTotalOverall(inputBillPriceVal, inputTipPctVal, inputNumPeopleVal, inputSalesTaxVal) {\n      let tax = (inputBillPriceVal) - (inputBillPriceVal / ((inputSalesTaxVal * 0.01) + 1));\n      let totalNoTax = inputBillPriceVal - tax;\n      let finalTotalTip = totalNoTax * (inputTipPctVal * 0.01);\n\n      let finalTotal = (inputBillPriceVal + finalTotalTip) / inputNumPeopleVal;;\n      \n      return parseFloat(finalTotal).toFixed(2);\n    }\n    calculateTotalTax(inputBillPriceVal, inputTipPctVal, inputNumPeopleVal, inputSalesTaxVal) {\n      let tax = (inputBillPriceVal) - (inputBillPriceVal / ((inputSalesTaxVal * 0.01) + 1));\n      \n      return parseFloat(tax).toFixed(2);\n    }\n    calculateTotalTipTaxInc(inputBillPriceVal, inputTipPctVal, inputNumPeopleVal, inputSalesTaxVal) {\n      let finalTotalTip = (inputBillPriceVal * ((inputTipPctVal) * 0.01))/inputNumPeopleVal;\n      \n      return parseFloat(finalTotalTip).toFixed(2);\n    }\n    calculateTotalOverallTaxInc(inputBillPriceVal, inputTipPctVal, inputNumPeopleVal, inputSalesTaxVal) {\n      let finalTotalTip = (inputBillPriceVal * ( 1 + (inputTipPctVal) * 0.01))/inputNumPeopleVal;\n      \n      return parseFloat(finalTotalTip).toFixed(2);\n    }\n  }\n  /**\n   * Create the object\n   */\n  let calcutipObj = new Calcutip();\n})();\n"]}